schema {
    mutation: Mutation
    query: Query
}

########################
#   Mutation Schema    #
########################
type Mutation {
    register(input: RegisterInput!) : RegisterResult!
    login (input: LoginInput!) : LoginResult!
    logout : LogoutResult!
    forget (input: String!) : ForgetResult!
    reset (input: ResetInput!) : ResetResult!
    submit (input: SubmitInput!) : SubmitResult!
    bulletinPub(input: BulletinPubInput!) :BulletinPubResult!
    userInfoUpdate(input: UserInfoUpdateInput!): UserInfoUpdateResult!
    challengeMutate(input: ChallengeMutateInput!): ChallengeMutateResult!
    challengeAction(input: ChallengeActionInput!): ChallengeActionResult!
    startReplica(input: String!): StartReplicaResult!
    deleteImage(input: String!): DeleteImageResult!
    deleteReplica(input: String!): DeleteReplicaResult!
    addEventAction(input: AddEventInput!): AddEventResult!
    updateEvent(input: UpdateEventInput!): UpdateEventResult!
    deleteEvent(input: DeleteEventInput!): DeleteEventResult!
}

input RegisterInput {
    name: String!
    password: String!
    mail: String!
}

type RegisterResult {

    message: String!
}

input LoginInput {
    mail: String!
    password: String!
}

type LoginResult {
    message: String!
    userId: String!
    role: String!
}

type LogoutResult {
    message: String!
}

type ForgetResult {
    message: String!
}

input ResetInput {
    password: String!
    token: String!
}

type ResetResult {
    message: String!
}

input SubmitInput {
    challengeId: String!
    flag: String!
}

type SubmitResult {
    message: String!
}

input BulletinPubInput {
    title: String!
    content: String!
    topping: Boolean!
}

type BulletinPubResult {
    message: String!
}

input UserInfoUpdateInput {
    userId: String!
    name: String!
    role: String!
    mail: String!
    state: String!
}

type UserInfoUpdateResult {
    message: String!
}

input ChallengeMutateInput {
    challengeId: String!
    name: String!
    category: String!
    score: ScoreTypeInput!
    flag: FlagTypeInput!
    description: String!
    externalLink: [String!]!
    state: String!
    singleton: Boolean!
    nodeConfig: [NodeConfigInput!]
}

input ScoreTypeInput {
    dynamic: Boolean!
    baseScore: String!
}

input FlagTypeInput {
    type: Int!
    value: String!
}

input NodeConfigInput {
    name: String!
    image: String!
    servicePorts: [ServicePortInput!]!
}


input ServicePortInput {
    name: String!
    protocol: String!
    external: Int!
    internal: Int!
    pod: Int! # 0 for auto allocate port
}

type ChallengeMutateResult {
    message: String!
}

type ChallengeRemoveResult {
    message: String!
}


#####################
#   Query Schema    #
#####################
type Query {
    allUserInfos: AllUserInfoResult
    userInfo(userId: String!) : UserInfoResult
    challengeInfos: ChallengeInfosResult
    challengeConfigs: ChallengeConfigsResult
    rank: RankResult
    allBulletin : BulletinResult
    submitHistory(userId: String!): SubmitHistoryResult
    writeUpInfos: WriteUpInfoResult
    imageInfos: ImageInfoResult
    clusterInfo: ClusterInfoResult
    watchDescription(challengeId: String!): WatchDescriptionResult
    allEvents: AllEventResult
    allocStatus(challengeId: String!): AllocStatusResult
}
type UserInfoResult {
    message: String!
    userInfo: UserInfo!
}

type UserInfo {
    userId: String! # long to String
    name: String!
    avatar: String!
    mail: String!
    joinTime: String! # Timestamp to String
    score: Int!
    role: String!
    state: String!
}

type AllUserInfoResult {
    message: String!
    allUserInfos: [UserInfo!]!
}

type RankResult {
    message: String!
    rankResultDescs: [RankResultDesc!]!
}

type ChallengeInfosResult {
    message: String!
    challengeInfos: [ChallengeInfo!]!
}

type RankResultDesc {
    userId: String!
    name: String!
    avatar: String!
    score: Int!
}

type ChallengeInfo {
    challengeId: String!
    name: String!
    category: String!
    score: Int!
    solvedNum: Int!
    blood: [BloodInfo!]!
    done: Boolean!
}

type ChallengeDesc {
    challengeId: String!
    description: String!
    externalLink: [String!]!
    manual: Boolean!
    allocated: Int!
}

type BloodInfo {
    userId: String!
    name: String!
    avatar: String!
}

type ChallengeConfigsResult {
    message: String!
    challengeConfigs: [ChallengeConfigAndState!]!
}

type ChallengeConfigAndState {
    challengeId: String!
    name: String!
    config: ChallengeConfig!
    state: String!
}

type ChallengeConfig {
    category: String!
    score: ScoreType!
    flag: FlagType!
    description: String!
    externalLink: [String!]!
    singleton: Boolean!
    nodeConfig: [NodeConfig!]!
}

type NodeConfig {
    name: String!
    image: String!
    servicePorts: [ServicePort!]!
}

type ServicePort {
    name: String!
    protocol: String!
    external: Int!
    internal: Int!
    pod: Int!
}

type ScoreType {
    dynamic: Boolean!
    baseScore: String!
}

type FlagType {
    type: Int!
    value: String!
}

type BulletinResult {
    message: String!
    bulletins: [Bulletin!]!
}

type Bulletin {
    style: String!
    title: String!
    content: String!
    publishTime: String!
}

type SubmitHistoryResult {
    message: String!
    submitInfos: [SubmitInfo!]!
}

type SubmitInfo {
    submitTime: String!
    challengeName: String!
}

type WriteUpInfoResult {
    message: String!
    infos: [WriteUpInfo!]!
}

type WriteUpInfo {
    userId: String!
    name: String!
    mail: String!
    solved: Int!
}

type StartReplicaResult {
    message: String!
}

type ImageInfoResult {
    message: String!
    infos: [ImageInfo!]!
}

type ImageInfo {
    name: String!
    platform: String!
    size: String!
    digest: String!
}

type DeleteImageResult {
    message: String!
}

type DeleteReplicaResult {
    message: String!
}

type ClusterNodeInfo {
    name: String!
    osType: String!
    distribution: String!
    kernel: String!
    arch: String!
}

type ClusterReplicaInfo {
    name: String!
    node: String!
    status: String!
}

type ClusterInfoResult {
    message: String!
    nodes: [ClusterNodeInfo!]!
    replicas: [ClusterReplicaInfo!]!
}

input ChallengeActionInput {
    action: String!
    challengeIds: [String!]!
}

type ChallengeActionResult {
    message: String!
    successful: [String!]!
}

type WatchDescriptionResult {
    message: String!
    description: ChallengeDesc!
}

type AllocStatusResult {
    message: String!
    allocated: Int!
}

input AddEventInput {
    action: Int!
    time: String!
}

type AddEventResult {
    message: String!
}

input UpdateEventInput {
    eventId: String!
    time: String!
}

type UpdateEventResult {
    message: String!
}

input DeleteEventInput {
    eventIds: [String!]!
}

type DeleteEventResult {
    message: String!
}

type GameEvent {
    eventId: String!
    time: String!
    action: Int!
}

type AllEventResult {
    message: String!
    allEvents: [GameEvent!]!
}
