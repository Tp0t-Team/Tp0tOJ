schema {
    mutation: Mutation
    query: Query
}

#####################
#   Query Schema    #
#####################
type Mutation {
    register(input: RegisterInput!) : RegisterResult!
    login (input: LoginInput!) : LoginResult!
    logout : LogoutResult!
    forget (input: String!) : ForgetResult!
    reset (input: ResetInput!) : ResetResult!
    submit (input: SubmitInput!) : SubmitResult!
    bulletinPub(input: BulletinPubInput!) :BulletinPubResult!
    userInfoUpdate(input: UserInfoUpdateInput!): UserInfoUpdateResult!
    challengeMutate(input: ChallengeMutateInput!): ChallengeMutateResult!
    challengeRemove(input: String!): ChallengeRemoveResult!
    warmUp: Boolean!
}

input RegisterInput {
    name: String!
#    stuNumber: String!
    password: String!
#    department: String!
#    grade: String!
#    qq: String!
    mail: String!
}

type RegisterResult {
    # success, xxx already in use, invalid xxx, failed, already login, not empty error
    message: String
}

input LoginInput {
#    stuNumber: String!
    mail: String!
    password: String!
}

type LoginResult {
    message: String
    userId: String
    role: String
}

type LogoutResult {
    message: String
}

type ForgetResult {
    message: String
}

input ResetInput {
    password: String
    token: String
}

type ResetResult {
    message: String
}

input SubmitInput {
    challengeId: String!
    flag: String!
}

type SubmitResult {
    message: String
}

input BulletinPubInput {
    title: String!
    content: String!
    topping: Boolean!
}

type BulletinPubResult {
    message: String
}

input UserInfoUpdateInput {
    userId: String!
    name: String!
    role: String!
#    department: String!
#    grade: String!
#    protectedTime: String!
#    qq: String!
    mail: String!
    state: String!
}

type UserInfoUpdateResult {
    message: String!
}

input ChallengeMutateInput {
    challengeId: String!
    name: String!
    category: String!
    score: ScoreTypeInput!
    flag: FlagTypeInput!
    description: String!
    externalLink: [String]!
    hint: [String]!
    state: String!
}

input ScoreTypeInput {
    dynamic: Boolean!
    baseScore: String!
}

input FlagTypeInput {
    dynamic: Boolean!
    value: String!
}

type ChallengeMutateResult {
    message: String
}

type ChallengeRemoveResult {
    message: String
}


#####################
#   Query Schema    #
#####################
type Query {
    allUserInfos: AllUserInfoResult
    userInfo(userId: String!) : UserInfoResult
    #    test: String
    challengeInfos: ChallengeInfosResult
    challengeConfigs: ChallengeConfigsResult
    rank: RankResult
    allBulletin : BulletinResult
    submitHistory(userId: String!): SubmitHistoryResult
}
type UserInfoResult {
    message: String
    userInfo: UserInfo
}

type UserInfo {
    userId: String # long to String
    name: String
    avatar: String
    #    stuNumber: String
    #    department: String
    #    qq: String
    mail: String
    joinTime: String # Timestamp to String
    score: String # long to String
    #    topRank: Int
    #    protectedTime: String # Timestamp to String
    role: String
    state: String
    rank: Int
    #    grade: String
}

type AllUserInfoResult {
    message: String
    allUserInfos: [UserInfo]
}

type RankResult {
    message: String
    rankResultDescs: [RankResultDesc]
}

type ChallengeInfosResult {
    message: String
    challengeInfos: [ChallengeInfo]
}

type RankResultDesc {
    userId: String
    name: String
    avatar: String
    score: Int
}

type ChallengeInfo {
    challengeId: String
    type: String
    name: String
    score: Int
    description: String
    externalLink: [String]
    hint: [String]
    blood: [BloodInfo]
    done: Boolean
}

type BloodInfo {
    userId: String
    name: String
    avatar: String
}

type ChallengeConfigsResult {
    message: String
    challengeConfigs: [ChallengeConfig]
}

type ChallengeConfig {
    challengeId: String
    name: String
    category: String
    score: ScoreType
    flag: FlagType
    description: String
    externalLink: [String]
    hint: [String]
    state: String
}

type ScoreType {
    dynamic: Boolean
    baseScore: String
}

type FlagType {
    dynamic: Boolean
    value: String
}

type BulletinResult {
    message: String
    bulletins: [Bulletin]
}

type Bulletin {
    title: String
    content: String
    publishTime: String
}

type SubmitHistoryResult {
    message: String
    submitInfos: [SubmitInfo]
}

type SubmitInfo {
    submitTime: String
    challengeName: String
    mark: Int
}